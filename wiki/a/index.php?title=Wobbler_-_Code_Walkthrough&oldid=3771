<!DOCTYPE html>
<html class="client-nojs" lang="en" dir="ltr">
<head>
<meta charset="UTF-8"/>
<title>Wobbler - Code Walkthrough - sdk-wiki</title>
<script>document.documentElement.className = document.documentElement.className.replace( /(^|\s)client-nojs(\s|$)/, "$1client-js$2" );</script>
<script>(window.RLQ=window.RLQ||[]).push(function(){mw.config.set({"wgCanonicalNamespace":"","wgCanonicalSpecialPageName":false,"wgNamespaceNumber":0,"wgPageName":"Wobbler_-_Code_Walkthrough","wgTitle":"Wobbler - Code Walkthrough","wgCurRevisionId":3771,"wgRevisionId":3771,"wgArticleId":470,"wgIsArticle":true,"wgIsRedirect":false,"wgAction":"view","wgUserName":null,"wgUserGroups":["*"],"wgCategories":[],"wgBreakFrames":false,"wgPageContentLanguage":"en","wgPageContentModel":"wikitext","wgSeparatorTransformTable":["",""],"wgDigitTransformTable":["",""],"wgDefaultDateFormat":"dmy","wgMonthNames":["","January","February","March","April","May","June","July","August","September","October","November","December"],"wgMonthNamesShort":["","Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"wgRelevantPageName":"Wobbler_-_Code_Walkthrough","wgRelevantArticleId":470,"wgRequestId":"395623f8b8a45e7bc407cf2b","wgIsProbablyEditable":false,"wgRelevantPageIsProbablyEditable":false,"wgRestrictionEdit":["autoconfirmed"],"wgRestrictionMove":["autoconfirmed"]});mw.loader.state({"site.styles":"ready","noscript":"ready","user.styles":"ready","user":"ready","site":"ready","user.options":"ready","user.tokens":"loading","ext.pygments":"ready","mediawiki.legacy.shared":"ready","mediawiki.legacy.commonPrint":"ready","mediawiki.sectionAnchor":"ready"});mw.loader.implement("user.tokens@0ppuq4y",function($,jQuery,require,module){/*@nomin*/mw.user.tokens.set({"editToken":"+\\","patrolToken":"+\\","watchToken":"+\\","csrfToken":"+\\"});
});mw.loader.load(["mediawiki.page.startup","mediawiki.user","mediawiki.hidpi","mediawiki.page.ready","mediawiki.searchSuggest","skins.cavendishmw-rethinkrobotics"]);});</script>
<link rel="stylesheet" href="/wiki/a/load.php?debug=false&amp;lang=en&amp;modules=ext.pygments%7Cmediawiki.legacy.commonPrint%2Cshared%7Cmediawiki.sectionAnchor&amp;only=styles&amp;skin=cavendishmw-rethinkrobotics"/>
<script async="" src="/wiki/a/load.php?debug=false&amp;lang=en&amp;modules=startup&amp;only=scripts&amp;skin=cavendishmw-rethinkrobotics"></script>
<meta name="ResourceLoaderDynamicStyles" content=""/>
<link rel="stylesheet" href="/wiki/a/load.php?debug=false&amp;lang=en&amp;modules=site.styles&amp;only=styles&amp;skin=cavendishmw-rethinkrobotics"/>
<meta name="generator" content="MediaWiki 1.31.0"/>
<meta name="robots" content="noindex,nofollow"/>
<link rel="shortcut icon" href="/favicon.ico"/>
<link rel="search" type="application/opensearchdescription+xml" href="/wiki/a/opensearch_desc.php" title="sdk-wiki (en)"/>
<link rel="EditURI" type="application/rsd+xml" href="http://sdk.rethinkrobotics.com/wiki/a/api.php?action=rsd"/>
<link rel="alternate" type="application/atom+xml" title="sdk-wiki Atom feed" href="/wiki/a/index.php?title=Special:RecentChanges&amp;feed=atom"/>
<!--[if lt IE 9]><script src="/wiki/a/load.php?debug=false&amp;lang=en&amp;modules=html5shiv&amp;only=scripts&amp;skin=cavendishmw-rethinkrobotics&amp;sync=1"></script><![endif]-->
</head>
<body class="mediawiki ltr sitedir-ltr mw-hide-empty-elt ns-0 ns-subject page-Wobbler_-_Code_Walkthrough rootpage-Wobbler_-_Code_Walkthrough skin-cavendishmw-rethinkrobotics action-view"><div id="container"><!-- start fragment header -->
    <!-- <div id="mozilla-org"><a href="#">Mozilla Skin</a></div> -->
    <div id="header" class="noprint">
        <a name="top" id="contentTop"></a>

        <!-- Logo + site name -->
        <h1>
            <a href="/wiki/Main_Page" style="text-indent: 2em; width: 194px; height: 67px; background: transparent url(/wiki/a/skins/cavendishmw-rethinkrobotics/styles/images/header_logo.png) no-repeat scroll 5px -5px;" title="Visit the main page">&nbsp;</a>        </h1>

	<div id="rr_ActionWrap">
	<!-- Account action links -->
	<div id="accountActions"><a href="/wiki/a/index.php?title=Special:UserLogin&returnto=Wobbler+-+Code+Walkthrough&returntoquery=oldid%3D3771">Log in</a></div>
        <!-- Search box -->
            <form action="/wiki/a/index.php" id="searchform">
        <label for="searchInput">Search</label>
        <input type='hidden' name="title" value="Special:Search"/>
        <input type="search" name="search" placeholder="Search sdk-wiki" title="Search sdk-wiki [f]" accesskey="f" id="searchInput"/>
        &#160;
        <input type="submit" name="fulltext" value="Search" title="Search the pages for this text" id="mw-searchButton" class="searchButton"/>    </form>
	</div>
    </div> <!-- End header div -->
<!-- end fragment header --><div id="mBody"><!-- start fragment mainContent -->
<!-- start fragment firstHeader -->
<div id="firstHeadingDiv" class="firstHeading">
    <h1 lang="en"><span dir="auto">Wobbler - Code Walkthrough</span></h1>


        <!-- Content action buttons -->
        <ul><li><a href="#">More</a><ul><li id="ca-viewsource"><a href="/wiki/a/index.php?title=Wobbler_-_Code_Walkthrough&amp;action=edit" title="This page is protected.&#10;You can view its source [e]" accesskey="e">View source</a></li><li id="ca-history"><a href="/wiki/a/index.php?title=Wobbler_-_Code_Walkthrough&amp;action=history" title="Past revisions of this page [h]" accesskey="h">History</a></li></ul></li><li id="ca-nstab-main" class="selected"><a href="/wiki/Wobbler_-_Code_Walkthrough" title="View the content page [c]" accesskey="c">Page</a></li></ul>
</div><!-- end fragment firstHeader --><!-- start fragment sidebar -->        <div id="side" class="noprint" > <!-- cavendishmw: s/column-one/side/ -->
            <ul id="nav">
                      <li><span>Navigation</span>
            <ul>
                <li id="n-Getting-Started"><a href="/wiki/Getting_Started">Getting Started</a></li>
                <li id="n-Learning"><a href="/wiki/Learning">Learning</a></li>
                <li id="n-Community"><a href="/wiki/Community">Community</a></li>
                <li id="n-Support"><a href="/wiki/Support">Support</a></li>
            </ul>
        </li>
      <li><span>Links</span>
            <ul class="collapsible-collapsed">
                <li id="n-Forum"><a href="https://groups.google.com/a/rethinkrobotics.com/forum/#!forum/brr-users" rel="nofollow">Forum</a></li>
                <li id="n-Source"><a href="https://github.com/RethinkRobotics" rel="nofollow">Source</a></li>
                <li id="n-Source-API"><a href="http://api.rethinkrobotics.com/" rel="nofollow">Source API</a></li>
            </ul>
        </li>
      <li><span>Tools</span>
            <ul class="collapsible-collapsed">
                <li id="n-All-Pages"><a href="/wiki/Special:AllPages">All Pages</a></li>
                <li id="n-Upload-File"><a href="/wiki/Special:Upload">Upload File</a></li>
                <li id="n-What-Links-Here.3F"><a href="/wiki/Special:WhatLinksHere">What Links Here?</a></li>
            </ul>
        </li>
            </ul> <!-- /nav -->
        </div> <!-- /side -->
<!-- end fragment sidebar -->
<div id="mainContent"> <!-- cavendishmw: s/column-content/mainContent/ -->
    
  <div id="bodyContent" class="mw-body">
    <div id="siteSub">From sdk-wiki</div>
    <div id="contentSub"><div class="mw-revision"><div id="mw-revision-info">Revision as of 21:09, 7 January 2015 by <a href="/wiki/a/index.php?title=User:Imcmahon&amp;action=edit&amp;redlink=1" class="new mw-userlink" title="User:Imcmahon (page does not exist)"><bdi>Imcmahon</bdi></a> <span class="mw-usertoollinks">(<a href="/wiki/a/index.php?title=User_talk:Imcmahon&amp;action=edit&amp;redlink=1" class="new mw-usertoollinks-talk" title="User talk:Imcmahon (page does not exist)">talk</a> | <a href="/wiki/Special:Contributions/Imcmahon" class="mw-usertoollinks-contribs" title="Special:Contributions/Imcmahon">contribs</a>)</span> <span class="comment">(<a href="#Code_Walkthrough">→</a>‎<span dir="auto"><span class="autocomment">Code Walkthrough</span></span>)</span></div><div id="mw-revision-nav">(<a href="/wiki/a/index.php?title=Wobbler_-_Code_Walkthrough&amp;diff=prev&amp;oldid=3771" title="Wobbler - Code Walkthrough">diff</a>) <a href="/wiki/a/index.php?title=Wobbler_-_Code_Walkthrough&amp;direction=prev&amp;oldid=3771" title="Wobbler - Code Walkthrough">← Older revision</a> | Latest revision (diff) | Newer revision → (diff)</div></div></div>
    <div id="jump-to-nav" class="mw-jump">Jump to: <a href="#column-one">navigation</a>, <a href="#searchInput">search</a></div>
    
  <!-- start content -->
  <div id="mw-content-text" lang="en" dir="ltr" class="mw-content-ltr"><div class="mw-parser-output"><div style="padding:5px; border:1px solid #ffcc00; background:#FFFDDF; margin-bottom:0.2em; Font-size:140%;"><a href="/wiki/Wobbler_Example" title="Wobbler Example"><img alt="Back.png" src="/wiki/a/images/b/b9/Back.png" width="29" height="20" /></a> <a href="/wiki/Wobbler_Example" title="Wobbler Example">Wobbler Example</a></div>
<h2><span class="mw-headline" id="Introduction">Introduction</span></h2>
<p>This example demonstrates the usage of the velocity controller to control baxter's limbs using the velocity commands. The code consists of a <code>main()</code> function that initializes the ros node and creates an instance of the <code>Wobbler</code> class. In its <code>__init__()</code> function, instances for the left and right limb class are created. The <code>wobble</code> method is called which in turn calls the <code>set_neutral</code> method that sets the limbs to a predefined neutral position. The <code>wobble()</code> method is primarily responsible for calculating the torques necessary for the harmonic motion of the joints. Terminating the example would invoke the <code>clean_shutdown()</code> method where the limbs are sent back to the neutral mode and the original state of the robot is restored.<br />
<b>Interfaces- </b>
</p>
<div style="column-count:3;-moz-column-count:3;-webkit-column-count:3">
<ul><li>Limb.joint_names()</li>
<li>Limb.exit_control_mode()</li>
<li>Limb.move_to_neutral()</li>
<li>Limb.set_joint_velocities(&lt;<i>double</i>&gt;)</li></ul>
</div>
<h2><span class="mw-headline" id="Code_Walkthrough">Code Walkthrough</span></h2>
<p>Now, let's break down the code
</p>
<div class="mw-highlight mw-content-ltr" dir="ltr"><pre><span></span><span class="lineno">30 </span><span class="kn">import</span> <span class="nn">argparse</span>
<span class="lineno">31 </span><span class="kn">import</span> <span class="nn">math</span>
<span class="lineno">32 </span><span class="kn">import</span> <span class="nn">random</span>
<span class="lineno">33 </span>
<span class="lineno">34 </span><span class="kn">import</span> <span class="nn">rospy</span>
<span class="lineno">35 </span>
<span class="lineno">36 </span><span class="kn">from</span> <span class="nn">std_msgs.msg</span> <span class="kn">import</span> <span class="p">(</span>
<span class="lineno">37 </span>    <span class="n">UInt16</span><span class="p">,</span>
<span class="lineno">38 </span><span class="p">)</span>
<span class="lineno">39 </span>
<span class="lineno">40 </span><span class="kn">import</span> <span class="nn">baxter_interface</span>
<span class="lineno">41 </span>
<span class="lineno">42 </span><span class="kn">from</span> <span class="nn">baxter_interface</span> <span class="kn">import</span> <span class="n">CHECK_VERSION</span>
</pre></div>
<p>This imports the baxter interface for accessing the head class. The <code>CHECK_VERSION</code> is imported to check if the software running on the robot would be compatible with this local version. It is not necessary to check the version in custom programs.
</p>
<div class="mw-highlight mw-content-ltr" dir="ltr"><pre><span></span><span class="lineno">45 </span><span class="k">class</span> <span class="nc">Wobbler</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
<span class="lineno">46 </span>
<span class="lineno">47 </span>    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
<span class="lineno">48 </span>        <span class="sd">&quot;&quot;&quot;</span>
<span class="lineno">49 </span><span class="sd">        &#39;Wobbles&#39; both arms by commanding joint velocities sinusoidally.</span>
<span class="lineno">50 </span><span class="sd">        &quot;&quot;&quot;</span>
<span class="lineno">51 </span>        <span class="bp">self</span><span class="o">.</span><span class="n">_pub_rate</span> <span class="o">=</span> <span class="n">rospy</span><span class="o">.</span><span class="n">Publisher</span><span class="p">(</span><span class="s1">&#39;robot/joint_state_publish_rate&#39;</span><span class="p">,</span>
<span class="lineno">52 </span>                                         <span class="n">UInt16</span><span class="p">,</span> <span class="n">queue_size</span><span class="o">=</span><span class="mi">10</span><span class="p">)</span>
<span class="lineno">53 </span>        <span class="bp">self</span><span class="o">.</span><span class="n">_left_arm</span> <span class="o">=</span> <span class="n">baxter_interface</span><span class="o">.</span><span class="n">limb</span><span class="o">.</span><span class="n">Limb</span><span class="p">(</span><span class="s2">&quot;left&quot;</span><span class="p">)</span>
<span class="lineno">54 </span>        <span class="bp">self</span><span class="o">.</span><span class="n">_right_arm</span> <span class="o">=</span> <span class="n">baxter_interface</span><span class="o">.</span><span class="n">limb</span><span class="o">.</span><span class="n">Limb</span><span class="p">(</span><span class="s2">&quot;right&quot;</span><span class="p">)</span>
<span class="lineno">55 </span>        <span class="bp">self</span><span class="o">.</span><span class="n">_left_joint_names</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">_left_arm</span><span class="o">.</span><span class="n">joint_names</span><span class="p">()</span>
<span class="lineno">56 </span>        <span class="bp">self</span><span class="o">.</span><span class="n">_right_joint_names</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">_right_arm</span><span class="o">.</span><span class="n">joint_names</span><span class="p">()</span>
</pre></div>
<p>The <code>_pub_rate</code> publisher sets the frequency at which the joint commands are updated. Two instances of the limb class are created for each of the limbs. The <code>joint_names()</code> method returns an array of strings that hold the names of each of the joints in that limb.
</p>
<div class="mw-highlight mw-content-ltr" dir="ltr"><pre><span></span><span class="lineno">58 </span>        <span class="k">print</span><span class="p">(</span><span class="s2">&quot;Getting robot state... &quot;</span><span class="p">)</span>
<span class="lineno">59 </span>        <span class="bp">self</span><span class="o">.</span><span class="n">_rs</span> <span class="o">=</span> <span class="n">baxter_interface</span><span class="o">.</span><span class="n">RobotEnable</span><span class="p">(</span><span class="n">CHECK_VERSION</span><span class="p">)</span>
<span class="lineno">60 </span>        <span class="bp">self</span><span class="o">.</span><span class="n">_init_state</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">_rs</span><span class="o">.</span><span class="n">state</span><span class="p">()</span><span class="o">.</span><span class="n">enabled</span>
<span class="lineno">61 </span>        <span class="k">print</span><span class="p">(</span><span class="s2">&quot;Enabling robot... &quot;</span><span class="p">)</span>
<span class="lineno">62 </span>        <span class="bp">self</span><span class="o">.</span><span class="n">_rs</span><span class="o">.</span><span class="n">enable</span><span class="p">()</span>
<span class="lineno">63 </span>
<span class="lineno">64 </span>        <span class="c1"># set joint state publishing to 100Hz</span>
<span class="lineno">65 </span>        <span class="bp">self</span><span class="o">.</span><span class="n">_pub_rate</span><span class="o">.</span><span class="n">publish</span><span class="p">(</span><span class="mi">100</span><span class="p">)</span>
</pre></div>
<p><code>baxter_interface.RobotEnable(CHECK_VERSION)</code> checks if the sdk version updated in the settings is the same as the sdk version loaded on the param server of the Robot and creates an object <code>_rs</code>  of the <code>RobotEnable</code> class. The next line sets the <code>_init_state</code> of the robot to its current state. The <code>enable()</code> performs the actual enabling of the robot. It is important to note that the robot should be in enabled state before attempting to move its joints. The joint state publishing rate is set to be at 100 Hz.
</p>
<div class="mw-highlight mw-content-ltr" dir="ltr"><pre><span></span><span class="lineno">67 </span>    <span class="k">def</span> <span class="nf">_reset_control_modes</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
<span class="lineno">68 </span>        <span class="n">rate</span> <span class="o">=</span> <span class="n">rospy</span><span class="o">.</span><span class="n">Rate</span><span class="p">(</span><span class="mi">100</span><span class="p">)</span>
<span class="lineno">69 </span>        <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">xrange</span><span class="p">(</span><span class="mi">100</span><span class="p">):</span>
<span class="lineno">70 </span>            <span class="k">if</span> <span class="n">rospy</span><span class="o">.</span><span class="n">is_shutdown</span><span class="p">():</span>
<span class="lineno">71 </span>                <span class="k">return</span> <span class="bp">False</span>
<span class="lineno">72 </span>            <span class="bp">self</span><span class="o">.</span><span class="n">_left_arm</span><span class="o">.</span><span class="n">exit_control_mode</span><span class="p">()</span>
<span class="lineno">73 </span>            <span class="bp">self</span><span class="o">.</span><span class="n">_right_arm</span><span class="o">.</span><span class="n">exit_control_mode</span><span class="p">()</span>
<span class="lineno">74 </span>            <span class="bp">self</span><span class="o">.</span><span class="n">_pub_rate</span><span class="o">.</span><span class="n">publish</span><span class="p">(</span><span class="mi">100</span><span class="p">)</span>
<span class="lineno">75 </span>            <span class="n">rate</span><span class="o">.</span><span class="n">sleep</span><span class="p">()</span>
<span class="lineno">76 </span>        <span class="k">return</span> <span class="bp">True</span>
</pre></div>
<p>The <code>exit_control_mode()</code> method switches the control from advanced control modes like velocity and torque control to the position control mode. In this example, it would be switching from velocity control mode to position control mode
</p>
<div class="mw-highlight mw-content-ltr" dir="ltr"><pre><span></span><span class="lineno">78 </span>    <span class="k">def</span> <span class="nf">set_neutral</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
<span class="lineno">79 </span>        <span class="sd">&quot;&quot;&quot;</span>
<span class="lineno">80 </span><span class="sd">        Sets both arms back into a neutral pose.</span>
<span class="lineno">81 </span><span class="sd">        &quot;&quot;&quot;</span>
<span class="lineno">82 </span>        <span class="k">print</span><span class="p">(</span><span class="s2">&quot;Moving to neutral pose...&quot;</span><span class="p">)</span>
<span class="lineno">83 </span>        <span class="bp">self</span><span class="o">.</span><span class="n">_left_arm</span><span class="o">.</span><span class="n">move_to_neutral</span><span class="p">()</span>
<span class="lineno">84 </span>        <span class="bp">self</span><span class="o">.</span><span class="n">_right_arm</span><span class="o">.</span><span class="n">move_to_neutral</span><span class="p">()</span>
</pre></div>
<p>The <code>move_to_neutral()</code> method moves the set of joints in that limb to a predefined position referred to as its neutral position. This employs the PID position controller to move the joints to that position.
</p>
<div class="mw-highlight mw-content-ltr" dir="ltr"><pre><span></span><span class="lineno">86 </span>    <span class="k">def</span> <span class="nf">clean_shutdown</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
<span class="lineno">87 </span>        <span class="k">print</span><span class="p">(</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">Exiting example...&quot;</span><span class="p">)</span>
<span class="lineno">88 </span>        <span class="c1">#return to normal</span>
<span class="lineno">89 </span>        <span class="bp">self</span><span class="o">.</span><span class="n">_reset_control_modes</span><span class="p">()</span>
<span class="lineno">90 </span>        <span class="bp">self</span><span class="o">.</span><span class="n">set_neutral</span><span class="p">()</span>
<span class="lineno">91 </span>        <span class="k">if</span> <span class="ow">not</span> <span class="bp">self</span><span class="o">.</span><span class="n">_init_state</span><span class="p">:</span>
<span class="lineno">92 </span>            <span class="k">print</span><span class="p">(</span><span class="s2">&quot;Disabling robot...&quot;</span><span class="p">)</span>
<span class="lineno">93 </span>            <span class="bp">self</span><span class="o">.</span><span class="n">_rs</span><span class="o">.</span><span class="n">disable</span><span class="p">()</span>
<span class="lineno">94 </span>        <span class="k">return</span> <span class="bp">True</span>
</pre></div>
<p>The <code>_reset_control_modes()</code> method and the <code>set_neutral()</code> method switches from velocity control mode to the position control mode and sets the limbs to a neutral position, as explained above. It checks if the robot was initially in disabled state before running the example and sends it back to that state if so.
</p>
<div class="mw-highlight mw-content-ltr" dir="ltr"><pre><span></span><span class="lineno"> 96 </span>    <span class="k">def</span> <span class="nf">wobble</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
<span class="lineno"> 97 </span>        <span class="bp">self</span><span class="o">.</span><span class="n">set_neutral</span><span class="p">()</span>
<span class="lineno"> 98 </span>        <span class="sd">&quot;&quot;&quot;</span>
<span class="lineno"> 99 </span><span class="sd">        Performs the wobbling of both arms.</span>
<span class="lineno">100 </span><span class="sd">        &quot;&quot;&quot;</span>
<span class="lineno">101 </span>        <span class="n">rate</span> <span class="o">=</span> <span class="n">rospy</span><span class="o">.</span><span class="n">Rate</span><span class="p">(</span><span class="mi">100</span><span class="p">)</span>
<span class="lineno">102 </span>        <span class="n">start</span> <span class="o">=</span> <span class="n">rospy</span><span class="o">.</span><span class="n">Time</span><span class="o">.</span><span class="n">now</span><span class="p">()</span>
</pre></div>
<p>The <code>wobble()</code> method is called to perform the actual wobbling of the limbs. The hands are first set to their neutral position.
</p>
<div class="mw-highlight mw-content-ltr" dir="ltr"><pre><span></span><span class="lineno">104 </span>        <span class="k">def</span> <span class="nf">make_v_func</span><span class="p">():</span>
<span class="lineno">105 </span>            <span class="sd">&quot;&quot;&quot;</span>
<span class="lineno">106 </span><span class="sd">            returns a randomly parameterized cosine function to control a</span>
<span class="lineno">107 </span><span class="sd">            specific joint.</span>
<span class="lineno">108 </span><span class="sd">            &quot;&quot;&quot;</span>
<span class="lineno">109 </span>            <span class="n">period_factor</span> <span class="o">=</span> <span class="n">random</span><span class="o">.</span><span class="n">uniform</span><span class="p">(</span><span class="mf">0.3</span><span class="p">,</span> <span class="mf">0.5</span><span class="p">)</span>
<span class="lineno">110 </span>            <span class="n">amplitude_factor</span> <span class="o">=</span> <span class="n">random</span><span class="o">.</span><span class="n">uniform</span><span class="p">(</span><span class="mf">0.1</span><span class="p">,</span> <span class="mf">0.2</span><span class="p">)</span>
<span class="lineno">111 </span>
<span class="lineno">112 </span>            <span class="k">def</span> <span class="nf">v_func</span><span class="p">(</span><span class="n">elapsed</span><span class="p">):</span>
<span class="lineno">113 </span>                <span class="n">w</span> <span class="o">=</span> <span class="n">period_factor</span> <span class="o">*</span> <span class="n">elapsed</span><span class="o">.</span><span class="n">to_sec</span><span class="p">()</span>
<span class="lineno">114 </span>                <span class="k">return</span> <span class="n">amplitude_factor</span> <span class="o">*</span> <span class="n">math</span><span class="o">.</span><span class="n">cos</span><span class="p">(</span><span class="n">w</span> <span class="o">*</span> <span class="mi">2</span> <span class="o">*</span> <span class="n">math</span><span class="o">.</span><span class="n">pi</span><span class="p">)</span>
<span class="lineno">115 </span>            <span class="k">return</span> <span class="n">v_func</span>
<span class="lineno">116 </span>
<span class="lineno">117 </span>        <span class="n">v_funcs</span> <span class="o">=</span> <span class="p">[</span><span class="n">make_v_func</span><span class="p">()</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">_right_joint_names</span><span class="p">]</span>
</pre></div>
<p>In Line # 117, <code>make_v_func()</code> is called for the number of joint_names in right limb. The left or right limb can be used for this purpose, since both the limbs have an equal number of joints.
The period and amplitude are random values generated for each joint. <code>return v_func()</code> indicates that a handle of the method <code>v_func()</code> is generated for this particular joint with the <code>period_factor</code> and <code>amplitude_factor</code> holding the generated random values. Similarly for each joint, a handle of the <code>v_func()</code> method is created with a constant and random amplitude and period values. This is done to make sure that the amplitude and frequency is same for each joint, till the end of the program. Then, the cosine function is calculated for each joint based on the formula<br />
</p>
<pre>x=a*cos(2*pi*f*t)
   where t refers to the time elapsed from the start.
         a refers to the amplitude
         f refers to the frequency
</pre>
<div class="mw-highlight mw-content-ltr" dir="ltr"><pre><span></span><span class="lineno">119 </span>        <span class="k">def</span> <span class="nf">make_cmd</span><span class="p">(</span><span class="n">joint_names</span><span class="p">,</span> <span class="n">elapsed</span><span class="p">):</span>
<span class="lineno">120 </span>            <span class="k">return</span> <span class="nb">dict</span><span class="p">([(</span><span class="n">joint</span><span class="p">,</span> <span class="n">v_funcs</span><span class="p">[</span><span class="n">i</span><span class="p">](</span><span class="n">elapsed</span><span class="p">))</span>
<span class="lineno">121 </span>                         <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">joint</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">joint_names</span><span class="p">)])</span>
</pre></div>
<p><code>v_funcs</code> is a list that holds the velocity commands for all the joints in the same order. For each of the joints in the particular limb, the corresponding velcoity command is stored in a dictionary.
</p>
<div class="mw-highlight mw-content-ltr" dir="ltr"><pre><span></span><span class="lineno">124 </span>        <span class="k">print</span><span class="p">(</span><span class="s2">&quot;Wobbling. Press Ctrl-C to stop...&quot;</span><span class="p">)</span>
<span class="lineno">125 </span>        <span class="k">while</span> <span class="ow">not</span> <span class="n">rospy</span><span class="o">.</span><span class="n">is_shutdown</span><span class="p">():</span>
<span class="lineno">126 </span>            <span class="bp">self</span><span class="o">.</span><span class="n">_pub_rate</span><span class="o">.</span><span class="n">publish</span><span class="p">(</span><span class="mi">100</span><span class="p">)</span>
<span class="lineno">127 </span>            <span class="n">elapsed</span> <span class="o">=</span> <span class="n">rospy</span><span class="o">.</span><span class="n">Time</span><span class="o">.</span><span class="n">now</span><span class="p">()</span> <span class="o">-</span> <span class="n">start</span>
<span class="lineno">128 </span>            <span class="n">cmd</span> <span class="o">=</span> <span class="n">make_cmd</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">_left_joint_names</span><span class="p">,</span> <span class="n">elapsed</span><span class="p">)</span>
<span class="lineno">129 </span>            <span class="bp">self</span><span class="o">.</span><span class="n">_left_arm</span><span class="o">.</span><span class="n">set_joint_velocities</span><span class="p">(</span><span class="n">cmd</span><span class="p">)</span>
<span class="lineno">130 </span>            <span class="n">cmd</span> <span class="o">=</span> <span class="n">make_cmd</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">_right_joint_names</span><span class="p">,</span> <span class="n">elapsed</span><span class="p">)</span>
<span class="lineno">131 </span>            <span class="bp">self</span><span class="o">.</span><span class="n">_right_arm</span><span class="o">.</span><span class="n">set_joint_velocities</span><span class="p">(</span><span class="n">cmd</span><span class="p">)</span>
<span class="lineno">132 </span>            <span class="n">rate</span><span class="o">.</span><span class="n">sleep</span><span class="p">()</span>
</pre></div>
<p>At 100 Hz, the velocity commands for the limbs are continuously calculated. <code>set_joint_velcoties()</code> publishes the velocity command as joint command with the mode as 2 to indicate that the commands are to be sent to the velocity controller.
</p>
<div class="mw-highlight mw-content-ltr" dir="ltr"><pre><span></span><span class="lineno">134 </span><span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
<span class="lineno">135 </span>    <span class="sd">&quot;&quot;&quot;RSDK Joint Velocity Example: Wobbler</span>
<span class="lineno">136 </span>
<span class="lineno">137 </span><span class="sd">    Commands joint velocities of randomly parameterized cosine waves</span>
<span class="lineno">138 </span><span class="sd">    to each joint. Demonstrates Joint Velocity Control Mode.</span>
<span class="lineno">139 </span><span class="sd">    &quot;&quot;&quot;</span>
<span class="lineno">140 </span>    <span class="n">arg_fmt</span> <span class="o">=</span> <span class="n">argparse</span><span class="o">.</span><span class="n">RawDescriptionHelpFormatter</span>
<span class="lineno">141 </span>    <span class="n">parser</span> <span class="o">=</span> <span class="n">argparse</span><span class="o">.</span><span class="n">ArgumentParser</span><span class="p">(</span><span class="n">formatter_class</span><span class="o">=</span><span class="n">arg_fmt</span><span class="p">,</span>
<span class="lineno">142 </span>                                     <span class="n">description</span><span class="o">=</span><span class="n">main</span><span class="o">.</span><span class="vm">__doc__</span><span class="p">)</span>
<span class="lineno">143 </span>    <span class="n">parser</span><span class="o">.</span><span class="n">parse_args</span><span class="p">(</span><span class="n">rospy</span><span class="o">.</span><span class="n">myargv</span><span class="p">()[</span><span class="mi">1</span><span class="p">:])</span>
<span class="lineno">144 </span>
<span class="lineno">145 </span>    <span class="k">print</span><span class="p">(</span><span class="s2">&quot;Initializing node... &quot;</span><span class="p">)</span>
<span class="lineno">146 </span>    <span class="n">rospy</span><span class="o">.</span><span class="n">init_node</span><span class="p">(</span><span class="s2">&quot;rsdk_joint_velocity_wobbler&quot;</span><span class="p">)</span>
<span class="lineno">147 </span>
<span class="lineno">148 </span>    <span class="n">wobbler</span> <span class="o">=</span> <span class="n">Wobbler</span><span class="p">()</span>
</pre></div>
<p>The <code>main</code> captures the side of limb on which the user wishes to run the example.
An instance of the <code>Wobbler</code> class is created for each of the limbs.
</p>
<div class="mw-highlight mw-content-ltr" dir="ltr"><pre><span></span><span class="lineno">1 </span>    <span class="n">wobbler</span> <span class="o">=</span> <span class="n">Wobbler</span><span class="p">()</span>
<span class="lineno">2 </span>    <span class="n">rospy</span><span class="o">.</span><span class="n">on_shutdown</span><span class="p">(</span><span class="n">wobbler</span><span class="o">.</span><span class="n">clean_shutdown</span><span class="p">)</span>
<span class="lineno">3 </span>    <span class="n">wobbler</span><span class="o">.</span><span class="n">wobble</span><span class="p">()</span>
<span class="lineno">4 </span>
<span class="lineno">5 </span>    <span class="k">print</span><span class="p">(</span><span class="s2">&quot;Done.&quot;</span><span class="p">)</span>
<span class="lineno">6 </span>
<span class="lineno">7 </span><span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s1">&#39;__main__&#39;</span><span class="p">:</span>
<span class="lineno">8 </span>    <span class="n">main</span><span class="p">()</span>
</pre></div>
<p>The <code>wobble()</code> method is called to perform the actual wobbling as discussed above.
</p>
<!-- 
NewPP limit report
Cached time: 20221129070647
Cache expiry: 86400
Dynamic content: false
CPU time usage: 0.043 seconds
Real time usage: 1.362 seconds
Preprocessor visited node count: 53/1000000
Preprocessor generated node count: 290/1000000
Post‐expand include size: 178/2097152 bytes
Template argument size: 30/2097152 bytes
Highest expansion depth: 2/40
Expensive parser function count: 0/100
Unstrip recursion depth: 0/20
Unstrip post‐expand size: 21450/5000000 bytes
-->
<!--
Transclusion expansion time report (%,ms,calls,template)
100.00%    0.847      1 Template:Parent_header
100.00%    0.847      1 -total
-->
</div>
<!-- Saved in parser cache with key wikisdk:pcache:idhash:470-0!canonical and timestamp 20221129070646 and revision id 3771
 -->
</div><div class="printfooter">
Retrieved from "<a dir="ltr" href="http://sdk.rethinkrobotics.com/wiki/a/index.php?title=Wobbler_-_Code_Walkthrough&amp;oldid=3771">http://sdk.rethinkrobotics.com/wiki/a/index.php?title=Wobbler_-_Code_Walkthrough&amp;oldid=3771</a>"</div>
  <div id="catlinks" class="catlinks catlinks-allhidden" data-mw="interface"></div>  <!-- end content -->
  
    <div class="visualClear"></div>
</div>
</div> <!-- /mainContent -->
<!-- end fragment mainContent --></div> <!-- /mBody --><div class="visualClear"></div><!-- start fragment footer -->    <div id="footer" role="contentinfo">
        <div id="f-poweredbyico">
                <a href="//www.mediawiki.org/"><img src="/wiki/a/resources/assets/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" srcset="/wiki/a/resources/assets/poweredby_mediawiki_132x47.png 1.5x, /wiki/a/resources/assets/poweredby_mediawiki_176x62.png 2x" width="88" height="31"/></a>
            </div>
        <ul id="f-list">
                <li id="copywrite_notice">&copy; 2015 Rethink Robotics. All rights reserved.</li>
                <li id="special_pages"><a href="/wiki/Special:SpecialPages" title="Special:SpecialPages">SpecialPages</a></li>
                <li id="privacy"><a href="/wiki/Sdk-wiki:Privacy_policy" title="Sdk-wiki:Privacy policy">Privacy policy</a></li>
                <li id="about"><a href="/wiki/Sdk-wiki:About" title="Sdk-wiki:About">About sdk-wiki</a></li>
                <li id="disclaimer"><a href="/wiki/Sdk-wiki:General_disclaimer" title="Sdk-wiki:General disclaimer">Disclaimers</a></li>
            </ul>
    </div><!-- end fragment footer --></div><script>(window.RLQ=window.RLQ||[]).push(function(){mw.config.set({"wgPageParseReport":{"limitreport":{"cputime":"0.043","walltime":"1.362","ppvisitednodes":{"value":53,"limit":1000000},"ppgeneratednodes":{"value":290,"limit":1000000},"postexpandincludesize":{"value":178,"limit":2097152},"templateargumentsize":{"value":30,"limit":2097152},"expansiondepth":{"value":2,"limit":40},"expensivefunctioncount":{"value":0,"limit":100},"unstrip-depth":{"value":0,"limit":20},"unstrip-size":{"value":21450,"limit":5000000},"timingprofile":["100.00%    0.847      1 Template:Parent_header","100.00%    0.847      1 -total"]},"cachereport":{"timestamp":"20221129070647","ttl":86400,"transientcontent":false}}});});</script><script>(window.RLQ=window.RLQ||[]).push(function(){mw.config.set({"wgBackendResponseTime":30});});</script></body></html>